#include <iostream>

/*
使用constexpr可以定义在编译时已知的常量，如常量值和常量数组等。这样可以在编译阶段进行求值，从而提高效率

对于求值，C++可以在三个阶段进行求值
    1、编译阶段求值
    2、运行阶段求值：某些表达式或函数的求值只能在运行时进行，特别是当它们依赖于运行时的输入、动态内存分配或某些运行时环境的状态时。
       这种求值方式会在程序执行过程中进行，通常比编译时求值略慢，因为它需要在实际运行时进行计算
    3、链接阶段求值：链接阶段求值主要涉及常量折叠和符号解析。当编译器可以推导出某些常量的值，但这些值需要跨翻译单元或文件时，
       编译器会在链接阶段对这些常量进行折叠和优化。虽然C++中并没有明确的链接阶段求值标识符，
       但在一些优化中（例如const和constexpr在不同的翻译单元中定义时），编译器可能会在链接阶段对这些符号的值进行推导。
*/

/*
顶层const：表示指针本身是常量，即指针的指向不能改变
底层const：表示指针所指的对象是一个常量，即指针指向的值不能改变
*/

// 执行该初始化任务时，编译器把对constexpr函数的调用替换成其结果值。为了能在编译过程中随时展开，constexpr函数被隐式地指定为内联函数
constexpr int func()
{
    return 42;
}
int main()
{
    constexpr int a = 10;       // 编译时常量 具有不可修改性
    const int *p = nullptr;     // 指针常量：即const修饰的是*p，指针指向的值不能改变
    constexpr int *q = nullptr; // q为常量指针，因为constexpr将其定义的对象置为顶层const，即指针的指向不能改变
    return 0;
}